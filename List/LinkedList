package List.LinkedListTest;


public class LinkedList {
    private Node head;  //NOde 타입
    private Node tail;  //Node 타입
    private int size=0;
    private  class Node{
        private Object data;
        private Node next;  // Node 타입
        public Node(Object input){
            this.data=input;
            this.next=null;
        }
        public String toString(){
            return String.valueOf(this.data);
        }
    }
    public void addFirst(Object input){
        Node newNode =new Node(input); //데이터 입력완료
        newNode.next=head;  // 다음 순서 지정완료(타입 객체)
        head = newNode;  // 배열의 헤드 선언(타입 객체)
        size++;         //배열의 사이즈 선언
        if(head.next==null){
            tail=head;   //배열의 테일 선언 (타입 객체)
        }
    }
    public void addLast(Object input) {
        Node newNode = new Node(input);
        if (size == 0) {
            addFirst(input);
        } else {
            tail.next = newNode;
            tail = newNode;
            size++;
        }
    }
     Node node(int index){
        Node x = head;
        for(int i=0; i<index; i++) {
            x = x.next;
        }
        return x;
    }
    public void add(int k,Object input){
        if(k==0){ addFirst(input);}
        else {
            Node temp1 = node(k-1);
            Node temp2 = temp1.next;
            Node newNode =new Node(input);
            temp1.next= newNode;
            newNode.next=temp2;
            size++;
            if(newNode.next==null){
                tail=newNode;
            }
        }
    }
    public String toString(){
        if(head==null){
            return"[]";
        }
        else{
            Node temp =head;
            String str="[";
            while(temp.next!=null){
                str+=temp.data+",";
                temp=temp.next;
            }
            str+=temp.data;
            return str+"]";
        }
    }
    public Object removeFirst(){
        Node temp = head;
        head=temp.next;
        Object returnData = temp.data;
        temp=null;
        size--;
        return returnData;
    }
    public Object remove(int k){
        if(k==0){
            return removeFirst();
        }else{
            Node temp= node(k-1);
            Node todoDeleted=temp.next;
            temp.next=temp.next.next;
            Object returnData =todoDeleted.data;
            if(todoDeleted==tail){
                tail=temp;
            }
            todoDeleted=null;
            size--;
            return returnData;
        }
    }
    public Object removeLast() {
        return remove(size-1);
    }
    public int size(){
        return size;
    }
    public Object get(int k){
        Node temp = node(k);
        return temp.data;
    }
    public int indexOf(Object data){
        Node temp = head;

        for(int i=0;i<size;i++){
            if(temp.data.equals(data)){
                return i;
            }
            else{
                temp=temp.next;
            }
        }
        return -1;
    }
    public ListIterator listIterator(){
        return new ListIterator();
    }
    class ListIterator{
        private Node next;
        private Node lastReturned;
        private int nextIndex;
        ListIterator() {
            next=head;
        }
        public Object next(){
            lastReturned = next;
            next=next.next;
            nextIndex++;
            return lastReturned.data;
        }
        public boolean hasNext(){
            return nextIndex < size();
        }
        public void add(Object input){
            Node newNode = new Node(input);
            if(lastReturned==null) {
                 head = newNode;
                newNode.next=next;
            }
            else {
                lastReturned.next = newNode;
                newNode.next = next;
            }
            lastReturned = newNode;
            nextIndex++;
            size++;
        }
        public void remove(){
            if(nextIndex ==0){
                throw new IllegalStateException();
            }
            LinkedList.this.remove(nextIndex-1);
            nextIndex--;
        }

    }

}

